// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  userName      String          @unique @map("user_name") @db.VarChar(100)
  firstName     String          @map("first_name") @db.VarChar(100)
  lastName      String          @map("last_name") @db.VarChar(100)
  email         String          @unique @db.VarChar(100)
  mobile        String          @unique @db.VarChar(20)
  password      String          @db.VarChar(191)
  profileImage  String?         @map("profile_image") @db.VarChar(191)
  isAdmin       Boolean         @default(false)
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updatedAt")
  event         Event[]
  eventrelation Eventrelation[]
  receiver      Bills[]         @relation(name: "receiver")
  paayee        Bills[]         @relation(name: "payee")
}

model Court {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  location    String?  @db.VarChar(191)
  ratePerHour Decimal? @map("rate_per_hour") @db.Decimal(6, 2)
  amountCourt Int?     @map("amount_court")
  mobile      String   @db.VarChar(20)
  detail      String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  courtImage  String?  @map("court_image") @db.VarChar(191)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updatedAt")

  operation Operation[]
  event     Event[]
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  WEEKDAYS
  WEEKEND
  HOLIDAY
}

model Operation {
  id        Int       @id @default(autoincrement())
  courtId   Int       @map("court_id")
  openTime  DateTime? @map("open_time") @db.Time()
  closeTime DateTime? @map("close_time") @db.Time()
  day       Days?

  courts Court @relation(fields: [courtId], references: [id])
}

enum Eventstatus {
  OPENED
  CLOSED
  BOOKED
  CANCELED
}

model Event {
  id            Int         @id @default(autoincrement())
  name          String?     @db.VarChar(100)
  courtId       Int         @map("court_id")
  eventDay      DateTime    @map("event_day") @db.DateTime(3)
  evnetDuration String      @map("event_duration") @db.VarChar(20)
  status        Eventstatus
  creatorId     Int         @map("creator_id")
  closingTime   DateTime    @map("closing_time") @db.DateTime(3)
  limit         Int?
  payFirst      Boolean     @default(false) @map("pay_first")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updatedAt")

  users         User            @relation(fields: [creatorId], references: [id])
  courts        Court           @relation(fields: [courtId], references: [id])
  eventrelation Eventrelation[]
  bills         Bills[]
}

model Eventrelation {
  id       Int @id @default(autoincrement())
  eventId  Int @map("event_id")
  playerId Int @map("player_id")

  events Event @relation(fields: [eventId], references: [id])
  users  User  @relation(fields: [playerId], references: [id])

  @@map("event_relation")
}

model Bills {
  id         Int @id @default(autoincrement())
  receiverId Int
  payeeId    Int
  eventId    Int

  receiver  User        @relation(name: "receiver", fields: [receiverId], references: [id])
  payee     User        @relation(name: "payee", fields: [payeeId], references: [id])
  event     Event       @relation(fields: [eventId], references: [id])
  billPrice BillPrice[]
}

enum Billstatus {
  PAID
  PENDING
  CANCELED
}

model BillPrice {
  id        Int        @id @default(autoincrement())
  billId    Int        @map("bill_id")
  status    Billstatus
  price     Decimal    @db.Decimal(8, 2)
  detail    String?    @db.Text
  createdAt DateTime   @default(now()) @map("created_at")

  bills Bills @relation(fields: [billId], references: [id])

  @@map("bill_price")
}
